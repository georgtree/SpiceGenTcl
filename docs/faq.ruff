namespace eval FAQ {
    variable _ruff_preamble {
        The most frequent questions are collected here.
        - [Where to find list of availible arguments for devices, models and analyses?]
        - [How to use different simulators for the same circuit (managing namespaces)?]
        - [How to change parameter of existing element?]
        - [Is scaling suffixes allowed?]
        - [How to change node name connected to pin of existing element?]
        - [How to find the list of optional parameters for elements?]
        - [How to get raw data after simulation?]
        - [How to get the names of all vectors in raw file?]
        - [How to get log file after simulation?]
        - [How to save result traces in comma-separated file format (csv)?]
        
        ## Where to find list of availible arguments for devices, models and analyses?
        For the selected simulator, you need to open the documentation for the corresponding namespace, such as
        Ngspice. Then, select the category you are interested in:
        - [::SpiceGenTcl::Ngspice::BasicDevices] - for basic devices like resistors, capacitors, etc.
        - [::SpiceGenTcl::Ngspice::Sources] - for current and voltage sources.
        - [::SpiceGenTcl::Ngspice::SemiconductorDevices] - for semiconductor devices like diodes, transistors, etc.
        - [::SpiceGenTcl::Ngspice::Analyses] - for availible analysis for selected simulator.
        
        Check out [::SpiceGenTcl::Ngspice::BasicDevices::Resistor] as an example.
        
        There, you can find a list of all available methods, a description of the arguments, an example of how the
        element string appears in the netlist, and an example of creating an object of the Resistor class.

        ## How to use different simulators for the same circuit (managing namespaces)?
        Each supported simulator has its own namespace. For example, `::SpiceGenTcl::Ngspice` is used for Ngspice,
        and `::SpiceGenTcl::Xyce` is used for Xyce. Additionally, there is the `::SpiceGenTcl::Common` namespace for
        devices with syntax that is compatible across most simulators.

        To use a particular simulator, you can call [::SpiceGenTcl::importNgspice] or [::SpiceGenTcl::importXyce] to
        import all command names into the current scope. This approach is convenient because it minimizes code changes.
        Using full command paths would be more cumbersome. Many elements share the same interface (such as nodes and
        parameters), so the same code works with different simulators with minimal modifications.

        You can also import element commands individually, like this:
        ```tcl
        namespace import ::SpiceGenTcl::Ngspice::R
        ```
        This allows you to import the appropriate simulator in conditional statements, depending on a global variable
        that defines the simulator currently in use.
        
        ## How to change parameter of existing element?
        
        For all elements with parameters you can change parameter value by its name with method
        [::SpiceGenTcl::Device::setParamValue].
        
        For example here we change the resistance value of basic resistor:
        ```tcl
        $resistor setParamValue r 100
        ```
        
        The name of the parameter can be found in the documentation
        [here]([::SpiceGenTcl::Ngspice::BasicDevices::Resistor]).
        In the parameter table, the option for resistance is labeled `-r`, so the name used for resistance is 'r'. 
        
        Another option is to call the [::SpiceGenTcl::Device::getParams] method, which returns a list of all parameters
        with their values. For example:
        ```tcl
        # create resistor
        set resistor [R new 1 net1 net2 -r 10]
        puts [$resistor getParams]
        ```
        
        It returns:
        ```
        r 10
        ```
        So parameter name is 'r' with value '10'.

        ## Is scaling suffixes allowed?
        Yes, for numerical values scaling suffixes are allowed, the full list is: f p n u m k meg g t.
        It must be placed after the numerical value, for example, 10u or 10Meg. Alphabetic values after the scaling
        suffix are also allowed.
        
        ## How to change node name connected to pin of existing element?
        
        For all elements with pins, you can change the connected node's name by using the pin name with the method
        [::SpiceGenTcl::Device::setPinNodeName].
        
        For example, here we change the node name of the basic resistor's positive pin:
        ```tcl
        $resistor setPinNodeName np net10
        ```
        
        The pin name can be found in the documentation [here]([::SpiceGenTcl::Ngspice::BasicDevices::Resistor]).
        In the parameter table, the pins are listed as `npNode` and `nmNode`, so the names used for the positive and
        negative pins are 'np' and 'nm', respectively. This `pin_nameNode` convention applies to all elements in the
        package.
        
        Another option is to call the [::SpiceGenTcl::Device::getPins] method, which returns a list of all pins with
        their connected node names. For example:
        ```tcl
        # create resistor
        set resistor [R new 1 net1 net2 -r 10]
        puts [$resistor getPins]
        ```
        
        It returns:
        ```
        np net1 nm net2
        ```
        So pins names are 'np' and 'nm' with connected nets 'net1' and 'net2'.
        
        
        ## How to find the list of optional parameters for elements?
        
        The list of parameters in the documentation includes descriptions of the mandatory arguments and availible
        options. But for some elements, especially models, there could be dozens of parameters, and I wanted to avoid
        cluttering the documentation.
        
        Typically, any optional parameters for elements are also optional in the simulator they relate to, so you can
        find a list of them in the simulator's manual. The convention for these parameters is `-nameOfParam value`.
        For example, for a basic resistor in Ngspice, you can provide values for the temperature coefficients, 'tc1'
        and 'tc2'. In SpiceGenTcl, these are added during the initialization of the resistor like this:
        ```tcl
        set resistor [R new 1 net1 net2 -r 10 -tc1 0.1 -tc2 0.4]
        ```
        
        Here we provide the mandatory parameters:
        - name of device without 'R' designator: '1'
        - nets connected to pins: 'net1' and 'net2'
        - value of resistance: '-r 10'
        Parameters 'tc1' and 'tc2' are provided here as optional arguments.
        
        In recent versions the `-help` switch is availible for most elements and models, so to get information about
        possible parameters, call construtor with switch `-help` in interactive tclsh terminal:
        ```tcl
        R new -help
        ```

        Result is:
        ```text
        Creates object of class `Resistor` that describes resistor. Can accepts
        unambiguous prefixes instead of switches names. Allows switches to appear after
        parameters.
            Switches:
                -r - Expects argument. Resistance value or equation.
                -beh - . Requires r. Forbids model.
                -model - Expects argument. . Forbids beh.
                -ac - Expects argument. AC resistance value. Forbids model or beh.
                -m - Expects argument. Multiplier value. Forbids beh.
                -scale - Expects argument. Scaling factor. Forbids beh.
                -temp - Expects argument. Device temperature. Forbids beh or dtemp.
                -dtemp - Expects argument. Temperature offset. Forbids beh or temp.
                -tc1 - Expects argument. Linear thermal coefficient. Forbids model.
                -tc2 - Expects argument. Quadratic thermal coefficient. Forbids model.
                -noisy - Expects argument. Selects noise behaviour. Value must be one
                    of: 0 or 1.
                -l - Expects argument. Length of semiconductor resistor. Requires model.
                -w - Expects argument. Width of semiconductor resistor. Requires model.
            Parameters:
                name - Name of the device without first-letter designator.
                npNode - Name of node connected to positive pin.
                nmNode - Name of node connected to negative pin.
        ```

        ## How to get raw data after simulation?
        
        After a successful simulation, an object of the [::SpiceGenTcl::RawFile] class is created and attached to the
        top-level [::SpiceGenTcl::Circuit] object. To retrieve the result vectors, simply call the
        [::SpiceGenTcl::Circuit::getDataDict] method on the [::SpiceGenTcl::Circuit] object. This method returns the
        result vectors as a dictionary, with vector names as keys and the vectors themselves as values. You can then
        access these vectors using the `dget` command.
        
        Example:
        ```tcl
        set data [$circuit getDataDict]
        set axisList [dget $data v(anode)]
        set traceList [dget $data i(va)]
        ```
        
        ## How to get the names of all vectors in raw file?
        
        For this task, you should first retrieve the [::SpiceGenTcl::RawFile] object reference from the
        [::SpiceGenTcl::Circuit] object using the `configure -data` method. Then, call the
        [::SpiceGenTcl::RawFile::getVariablesNames] method, which returns a list of all variable names.
        
        Example:
        ```tcl
        set rawFileObj [$circuit configure -data]
        puts [$rawFileObj getVariablesNames]
        ```
        
        There are also methods for retrieve all voltages and currents names separated from each other:
        [::SpiceGenTcl::RawFile::getVoltagesNames] and [::SpiceGenTcl::RawFile::getCurrentsNames].
        
        ## How to get log file after simulation?
        
        There is a property method for it in object of [::SpiceGenTcl::Circuit] class - `configure -log`, it returns
        string containing log file.
        
        Example:
        ```tcl
        puts [$circuit configure -log]
        ```

        ## How to save result traces in comma-separated file format (csv)?

        After simulation is done, you can use [::SpiceGenTcl::Circuit] class method [::SpiceGenTcl::Circuit::getDataCsv]
        to get string formatted with csv. You can get all traces with the flag `-all`, or select individual traces
        by providing name after `-traces` switch. Also you can define column separator after the flag `-sep`.

        For example, we modify `resistor_divider.tcl` example and convert `v(in)` and `v(out)` traces to csv string:
        ```tcl
        set circuit [Circuit new {voltage divider netlist}]
        $circuit add [Vdc new 1 in 0 -dc 1]
        $circuit add [R new 1 in out -r 1e3]
        $circuit add [R new 2 out 0 -r 2e3]
        $circuit add [Dc new -src v1 -start 0 -stop 5 -incr 1]
        set simulator [Batch new {batch1}]
        $circuit configure -simulator $simulator
        $circuit runAndRead
        set data [$circuit getDataCsv -traces v(in) v(out)]
        puts $data
        ```

        Resulted string is:
        ```csv
        v(in),v(out)
        0.0,0.0
        1.0,0.6666666666666666
        2.0,1.3333333333333333
        3.0,2.0
        4.0,2.6666666666666665
        5.0,3.333333333333333
        ```

        Then we can save this string to file:
        ```tcl
        set file [open file.csv w+]
        puts $file $data
        close $file
        ```
    }

}
