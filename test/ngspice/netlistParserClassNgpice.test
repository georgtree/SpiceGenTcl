#  .|'''.|            ||                   ..|'''.|                   |''||''|         '||'
#  ||..  '  ... ...  ...    ....    ....  .|'     '    ....  .. ...      ||      ....   ||  
#   ''|||.   ||'  ||  ||  .|   '' .|...|| ||    .... .|...||  ||  ||     ||    .|   ''  ||  
# .     '||  ||    |  ||  ||      ||      '|.    ||  ||       ||  ||     ||    ||       ||  
# |'....|'   ||...'  .||.  '|...'  '|...'  ''|...'|   '|...' .||. ||.   .||.    '|...' .||. 
#            ||                                                                             
#           ''''                                                                            
# netlistParserClassNgpice.test
# Tests Ngspice netlist parser class
#
# Copyright (c) 2024 George Yashin, georgtree@gmail.com
#
# MIT License
# See the file "LICENSE.txt" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
package require tcltest
namespace import ::tcltest::*
package require SpiceGenTcl
namespace import ::SpiceGenTcl::*
importNgspice

set epsilon 1e-8
set testDir [file dirname [info script]]
set netlistsLoc [file join $testDir netlists_parser]

proc matchList {expected actual} {
    variable epsilon
    set match 1
    set len [llength $expected]
    for {set i 0} {$i<$len} {incr i} {
        set exp [@ $expected $i]
        set act [@ $actual $i]
        if {abs($act-$exp) > $epsilon} {
            set match 0
            break
        }
    }
    return $match
}
    
    
proc readResultFile {path} {
    set file [open $path r+]
    set lines [split [read $file] "\n"]
    close $file                     
    foreach line $lines {
        set data [textutil::split::splitx [string trim $line]]
        lappend timeData [@ $data 0]
        lappend traceData [@ $data 1]
    }
    return [list $timeData $traceData]
}

proc stdout2var { var } { 
    set level [ info level ]
    # we may have called stdout2var before so this allows only one variable at a time
    # and preserves tcls original puts in putsorig 
    if { [ string length [info commands "putsorig" ] ]  == 0 } { 
        rename ::puts ::putsorig
    } 
    eval [subst -nocommands {proc ::puts { args } { 
    set fd stdout 
    # args check 
    switch -exact -- [llength \$args ] {
        1 { 
        set fd stdout
        } 
        2 { 
        if { ![string equal \"-nonewline\" [lindex \$args 0 ] ] } {
            set fd [lindex \$args 0 ]
        }
        }
        3 {
        set fd [lindex \$args 1 ]
        }
        default { 
        error \"to many or too few args to puts must be at most 3 ( -nonewline fd message )\" 
        }
    }
    # only put stdout to the var 
    if { [string equal \"stdout\" \$fd ] } {
           # just level and var are subst 
        set message [lindex \$args end ]
        uplevel [expr { [info level ] - $level + 1 } ] set $var \\\"\$message\\\"
    } else {
        # otherwise evaluate with tcls puts 
        eval ::putsorig \$args 
    }
    } } ]
} 

proc restorestdout { } {
    # only do rename if putsorig exists incase restorestdout is call before stdout2var or 
    # if its called multiple times
    if {  [ string length [ info commands "putsorig"] ] != 0  } { 
    rename ::puts ""
    rename ::putsorig ::puts 
    } 
}

    


###  Parser class tests 

test testParserClass-1 {test Parser class} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc diffpair_continue.cir]]
    $parser readFile
} -body {
    return [$parser configure -FileData]
} -result "{.model qnl npn(level=1 bf=80 rb=100 tf=0.3n tr=6n cje=3p cjc=2p vaf=50)} {.model qnr npn(level=1 bf=80\
rb=100 tf=0.3n tr=6n cje=3p cjc=2p vaf=50)} {.options noacct} {q1 4 2 6 qnr} {q2 5 3 6 qnl} {rs1 11 2 1k} {rs2 3 1 1k}\
{rc1 4 8 10k} {rc2 5 8 10k} {q3 7 7 9 qnl} {q4 6 7 9 qnr} {rbias 7 8 20k} {vcm 1 0 dc 0 sin(0 0.1 5meg) ac 1} {vdm 1 11\
dc 0 sin(0 0.1 5meg) ac 1} {vcc 8 0 12} {vee 9 0 -12} {.sens v(5,4)}" -cleanup {
    unset parser
}

test testParserClass-2 {test Parser class} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc adder_mos.cir]]
    $parser readFile
} -body {
    return [$parser configure -FileData]
} -result "{.subckt nand in1 in2 out vdd} {m1 out in2 vdd vdd p1 w=7.5u l=0.35u pd=13.5u ad=22.5p ps=13.5u as=22.5p}\
{m2 net.1 in2 0 0 n1 w=3u l=0.35u pd=9u ad=9p ps=9u as=9p} {m3 out in1 vdd vdd p1 w=7.5u l=0.35u pd=13.5u ad=22.5p\
ps=13.5u as=22.5p} {m4 out in1 net.1 0 n1 w=3u l=0.35u pd=9u ad=9p ps=9u as=9p} {.ends nand} {.subckt onebit 1 2 3 4 5\
6} {x1 1 2 7 6 nand} {x2 1 7 8 6 nand} {x3 2 7 9 6 nand} {x4 8 9 10 6 nand} {x5 3 10 11 6 nand} {x6 3 11 12 6 nand} {x7\
10 11 13 6 nand} {x8 12 13 4 6 nand} {x9 11 7 5 6 nand} {.ends onebit} {.subckt twobit 1 2 3 4 5 6 7 8 9} {x1 1 2 7 5\
10 9 onebit} {x2 3 4 10 6 8 9 onebit} {.ends twobit} {.subckt fourbit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15} {x1 1 2 3 4\
9 10 13 16 15 twobit} {x2 5 6 7 8 11 12 16 14 15 twobit} {.ends fourbit} {vcc 99 0 dc 3.3v} {vin1a 1 0 dc 0 pulse(0 3\
0 5ns 5ns 20ns 50ns)} {vin1b 2 0 dc 0 pulse(0 3 0 5ns 5ns 30ns 100ns)} {vin2a 3 0 dc 0 pulse(0 3 0 5ns 5ns 50ns 200ns)}\
{vin2b 4 0 dc 0 pulse(0 3 0 5ns 5ns 90ns 400ns)} {vin3a 5 0 dc 0 pulse(0 3 0 5ns 5ns 170ns 800ns)} {vin3b 6 0 dc 0\
pulse(0 3 0 5ns 5ns 330ns 1600ns)} {vin4a 7 0 dc 0 pulse(0 3 0 5ns 5ns 650ns 3200ns)} {vin4b 8 0 dc 0 pulse(0 3 0 5ns\
5ns 1290ns 6400ns)} {x1 1 2 3 4 5 6 7 8 9 10 11 12 0 13 99 fourbit} {.option noinit acct} {.tran 500p 6400ns} {.save\
v(1) v(2) v(3) v(4) v(5) v(6) v(7) v(8)} {.model n1 nmos level=49 version=3.3.0} {.model p1 pmos level=49 version=3.3.0}\
.end" -cleanup {
    unset parser
}

test testParserClass-3 {test Parser class} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc adder_mos.cir]]
    $parser readFile
} -body {
    $parser getSubcircuitLines
    return [$parser configure -SubcktsBoundaries]
} -result "nand {0 5} onebit {6 16} twobit {17 20} fourbit {21 24}" -cleanup {
    unset parser
}

test testParserClass-4 {test Parser class} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc adder_mos_unmatched_subckt.cir]]
    $parser readFile
} -body {
    catch {$parser getSubcircuitLines} errorStr
    return $errorStr
} -result "Subcircuit 'fourbit' doesn't have matched .ends statement" -cleanup {
    unset parser
}

test testParserClass-5 {test Parser class} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc adder_mos_unmatched_subckt_1.cir]]
    $parser readFile
} -body {
    catch {$parser getSubcircuitLines} errorStr
    return $errorStr
} -result "Netlist contains mismatched .subckt .ends statements near definition of 'fourbit'" -cleanup {
    unset parser
}

test testParserClass-6 {test Parser class} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc adder_mos_unmatched_subckt_2.cir]]
    $parser readFile
} -body {
    catch {$parser getSubcircuitLines} errorStr
    return $errorStr
} -result ".ends statement appears on line 0 (pre-processed netlist) before definition of subcircuit begins" -cleanup {
    unset parser
}

test testParserClass-7 {test Parser class with nested subcircuit} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc adder_mos_nested_subckt.cir]]
    $parser readFile
} -body {
    catch {$parser getSubcircuitLines} errorStr
    return $errorStr
} -result "Subcircuit 'onebit' doesn't have matched .ends statement" -cleanup {
    unset parser
}

test testParserClass-8 {test Parser class} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc diffpair_cir_build.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result ".model qnl npn(level=1 bf=80 rb=100 tf=0.3n tr=6n cje=3p cjc=2p vaf=50)
.model qnr npn(level=1 bf=80 rb=100 tf=0.3n tr=6n cje=3p cjc=2p vaf=50)
rs1 11 2 {res}
rs2 3 1 r={v(a)+v(b)/i(b)} tc2=1
rc1 4 8 10k tc1=2 tc2={tcrt}
rc2 5 8 10k
rbias 7 8 20k
vcm 1 0 dc 0 ac 1 sin 0 0.1 5meg
vdm 1 11 dc 0 ac 1 sin 0 0.1 5meg
vcc 8 0 12
vee 9 0 -12
.sens v(5,4)" -cleanup {
    unset parser
}

test testParserClass-9 {test Parser class} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc diffpair_cir_build_res_err_syntax.cir]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Creating resistor object from line 'rs2 3 1 r={v(a)+v(b)/i(b)}}} tc2=1' failed due to wrong or incompatible\
syntax" -cleanup {
    unset parser
}

### Resistors parsing test

test testParserClassResistors-1 {test Parser class, resistors parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc resistors_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "rs1 11 2 {res}
rs2 3 1 r={v(a)+v(b)/i(b)} tc2=1
rc1 4 8 10k tc1=2 tc2={tcrt}
rc2 5 8 10k
rc3 9 2 10k res1
rc4 4 5 res1 l={l1} w=2u
rc5 4 5 {rpar} res1 l={l1} w=2u
rb1 netp netm resmod l=1e-6 temp=25" -cleanup {
    unset parser
}

test testParserClassResistors-2 {test Parser class, resistors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {rs2 3 1 3 r={v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "rs2 3 1 3 tc2=1" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser
}

test testParserClassResistors-3 {test Parser class, resistors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {rs2 3 1 n r={v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "-tc2 conflicts with -model" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassResistors-4 {test Parser class, resistors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {rs2 3 1 beh={v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Creating resistor object from line 'rs2 3 1 beh={v(a)+v(b)/i(b)} tc2=1' failed due to wrong or incompatible\
syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassResistors-5 {test Parser class, resistors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {rs2 a b ! {v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Creating resistor object from line 'rs2 a b ! {v(a)+v(b)/i(b)} tc2=1' failed due to wrong or incompatible\
syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassResistors-6 {test Parser class, resistors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {rs2 a b {v} {v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Parameter '{v(a)+v(b)/i(b)}' parsing failed" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

### Capacitors parsing test

test testParserClassCapacitors-1 {test Parser class, capacitors parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc capacitors_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "c2 netp netm 1e-6
c3 netp netm c={v(a)+v(b)+pow(v(c),2)} tc1=1
c4 netp netm q={v(a)+v(b)+pow(v(c),2)} tc1=1
c5 netp netm capmod l=1e-6 w=10e-6 temp=25
c1 netp netm 1e-6 tc1=1 temp=25" -cleanup {
    unset parser
}

test testParserClassCapacitors-2 {test Parser class, capacitors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {cs2 3 1 3 c={v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "cs2 3 1 3 tc2=1" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser
}

test testParserClassCapacitors-3 {test Parser class, capacitors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {cs2 3 1 n c={v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "-tc2 conflicts with -model" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassCapacitors-4 {test Parser class, capacitors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {cs2 3 1 beh={v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Creating capacitor object from line 'cs2 3 1 beh={v(a)+v(b)/i(b)} tc2=1' failed due to wrong or incompatible\
syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassCapacitors-5 {test Parser class, capacitors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {cs2 a b ! {v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Creating capacitor object from line 'cs2 a b ! {v(a)+v(b)/i(b)} tc2=1' failed due to wrong or incompatible\
syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassCapacitors-6 {test Parser class, capacitors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {cs2 a b {v} {v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Parameter '{v(a)+v(b)/i(b)}' parsing failed" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

### Inductors parsing test

test testParserClassInductors-1 {test Parser class, inductors parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc inductors_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "l1 netp netm 1e-6 tc1=1 temp=25
l2 netp netm 1e-6
l3 netp netm 1e-6 indm
l4 netp netm indm
l5 netp netm l={v(a)+v(b)+pow(v(c),2)} tc1=1
l6 netp netm {l1*l2} tc1=1" -cleanup {
    unset parser
}

test testParserClassInductors-2 {test Parser class, inductors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {ls2 3 1 3 l={v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "ls2 3 1 3 tc2=1" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser
}

test testParserClassInductors-3 {test Parser class, inductors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {ls2 3 1 beh={v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Creating inductor object from line 'ls2 3 1 beh={v(a)+v(b)/i(b)} tc2=1' failed due to wrong or incompatible\
syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassInductors-4 {test Parser class, inductors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {ls2 a b ! {v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Creating inductor object from line 'ls2 a b ! {v(a)+v(b)/i(b)} tc2=1' failed due to wrong or incompatible\
syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassInductors-5 {test Parser class, inductors parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {ls2 a b {v} {v(a)+v(b)/i(b)} tc2=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Parameter '{v(a)+v(b)/i(b)}' parsing failed" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

### Models parsing test

test testParserClassModels-1 {test Parser class, models parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc models_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result ".model resmod r(tc1=1 tc2=2)
.model capmod c(tc1=1 tc2=2)
.model indmod l(tc1=1 tc2=2)
.model swmod sw(vt=1 vh=0.5 ron=1 roff=1e6)
.model cswmod csw(it=1 ih=0.5 ron=1 roff=1e6)
.model diodemod d(is=1e-14 n=1.2 rs=0.01 cjo=1e-9)
.model bjtmod npn(level=1 is=1e-15 bf=200 vaf=100 cje=1e-10)
.model jfetmod1 njf(level=1 vto=2 beta=1e-3 lambda=1e-4 cgd=1e-12)
.model jfetmod2 njf(level=2 vto=-2 beta=10e-4 rs=1e-4 vbi=1.2)
.model mesfetmod1 nmf(level=1 vto=2 beta=1e-3 lambda=1e-4 cgd=1e-12)
.model mesfetmod2 pmf(level=1 vto=-2 beta=1e-3 lambda=1e-4 cgd=1e-12)
.model res3mod r3model(tc1=1 tc2=2)" -cleanup {
    unset parser
}

test testParserClassModels-2 {test Parser class, models parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {.model swmod sw(vt= vh=0.5 ron=1 roff=1e6)}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Parameter 'vt=vh=0.5' parsing failed" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassModels-3 {test Parser class, models parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {.model mesfetmod3 nmf(level=4 vto=2 beta=1e-3 lambda=1e-4 cgd=1e-12)}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    stdout2var output
    $parser buildNetlist
    restorestdout
} -body {
    return $output
} -result "Level '4' of MESFET in line '.model mesfetmod3 nmf level=4 vto=2 beta=1e-3 lambda=1e-4 cgd=1e-12' is not\
        supported, skip that line" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser output
}

test testParserClassModels-4 {test Parser class, models parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {.model res3mod r3(tc1=1 tc2=2)}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    stdout2var output
    $parser buildNetlist
    restorestdout
} -body {
    return $output
} -result "Model type 'r3' is not in the list of supported types, custom type 'R3Model' was created" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser output
}


### Analyses parsing test

test testParserClassAnalyses-1 {test Parser class, analyses parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc analyses_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result ".dc v1 {time1} 5 0.1
.dc v1 0 5 0.1
.ac dec 10 {f1} 1e6
.ac lin 1000 1 1e6
.sp dec 10 {f1} 1e6
.sp lin 1000 1 1e6
.sp lin 1000 1 1e6 1
.sens v(1,out) ac dec 10 {f1} 1e6
.sens v(1,out) ac dec 10 1 1e6
.sens v(1,out) ac dec 10 1 1e6
.sens i(1,out)
.tran 1e-6 1e-3 0.1e-6 uic
.tran 1e-6 {tend} uic
.op" -cleanup {
    unset parser
}

test testParserClassAnalyses-2 {test Parser class, analyses parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {.sens v(1, out) sp dec 10 {f1} 1e6}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Sense analysis has usupported type 'sp'" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassAnalyses-3 {test Parser class, analyses parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {.sens v(1,out ac dec 10 {f1} 1e6}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Sense analysis in line '.sens v(1,out ac dec 10 {f1} 1e6' doesn't have output variable with proper\
        syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassAnalyses-4 {test Parser class, analyses parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {.dc v1 1 0 100 v2 2 50 200}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    stdout2var output
    $parser buildNetlist
    restorestdout
} -body {
    return $output
} -result "DC analysis with multiple sources is not supported in SpiceGenTcl, skip the other sources in line '.dc v1 1\
        0 100 v2 2 50 200'" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser output
}

test testParserClassAnalyses-5 {test Parser class, analyses parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {.sens a(1, out) ac dec 10 {f1} 1e6}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Sense analysis in line '.sens a(1, out) ac dec 10 {f1} 1e6' doesn't have output variable with proper\
        syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

### ParamStatement parsing test

test testParserClassParamStatement-1 {test Parser class, .param parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc  params_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result ".param u0t={rf+1} vth0=10
.param k1=1e-4 vth0=10 u0t={rf+1}
.param abv=1 tre=1k pre=1meg" -cleanup {
    unset parser
}

### Behavioural source parsing test

test testParserClassBsource-1 {test Parser class, behavioural sources parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc  bsources_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "b1 netp netm i={v(a)+v(b)+pow(v(c),2)} tc1=1
b2 netp netm v={v(a)+v(b)+pow(v(c),2)} tc1=1
b3 0 1 v={ln(cos(log(v(1,2)^2)))-v(3)^4+v(2)^v(1)}
b4 3 4 v={exp(pi^i(vdd))}
b35 3 4 i={17}" -cleanup {
    unset parser
}

test testParserClassBsource-2 {test Parser class, behavioural sources parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {b1 netp netm g={v(a)+v(b)+pow(v(c),2)} tc1=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "Creating behavioural source object from line 'b1 netp netm g={v(a)+v(b)+pow(v(c),2)} tc1=1' failed due to\
        wrong or incompatible syntax" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

test testParserClassBsource-3 {test Parser class, behavioural sources parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {b1 netp netm v={v(a)+v(b)+pow(v(c),2)} i={15} tc1=1}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "-i conflicts with -v" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

### Linear controlled sources parsing test

test testParserClassLctrlsources-1 {test Parser class, linear controlled sources parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc lctrlsources_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "g1 2 0 5 0 0.1 m={m}
g2 2 0 5 0 {value} m={m}
e1 2 3 14 1 2.0
e2 2 3 14 1 {value}
f1 13 5 vsens 5
f2 13 5 vsens {value}
h1 5 17 vz 0.5k
h2 5 17 vz {value}" -cleanup {
    unset parser
}

### Independent sources parsing test

test testParserClassIndsources-1 {test Parser class, independent sources parsing} -setup {
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc indsources_test.cir]]
    $parser readFile
    $parser buildNetlist
} -body {
    return [[$parser configure -Netlist] genSPICEString]
} -result "v1 10 0 6
i2 10 0 6
v3 10 0 {dc} ac 1
i4 10 0 6 ac 1 {acphase}
v5 10 0 6 ac 1
i6 10 0 6 ac 1 -45
v7 net1 net2 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6 10
i8 net1 net2 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6
v9 net1 net2 pulse 0 1 {td} 1e-9 1e-9 10e-6 20e-6
i10 net1 net2 pulse 0 1 {td} 1e-9 1e-9 10e-6 20e-6 {np}
v11 net1 net2 dc {dc} ac 0 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6 10
i12 net1 net2 ac 0 45 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6 10
v14 net1 net2 sin 0 2 50 1e-6
i15 net1 net2 sin 0 2 50 1e-6 {theta}
v16 net1 net2 sin 0 2 {freq} 1e-6 {theta}
i17 net1 net2 sin 0 2 50
v18 net1 net2 sin 0 2 50 1e-6 {theta}
i19 net1 net2 dc {ab} ac 0 sin 0 2 50 1e-6 {theta}
v20 net1 net2 ac 0 45 sin 0 2 50 1e-6 {theta}
i21 net1 net2 exp 0 1 1e-9 1e-9 1e-9 10e-6
v22 net1 net2 exp 0 1 1e-9 1e-9 {td2} 10e-6
i23 net1 net2 exp 0 1 1e-9 1e-9 1e-9 10e-6
v24 net1 net2 dc 1 ac 0 exp 0 1 1e-9 1e-9 1e-9 10e-6
i25 net1 net2 ac 0 45 exp 0 1 1e-9 1e-9 1e-9 10e-6
v26 npnode nmnode pwl 0 0 {t1} 1 2 2 3 3 4 4
i27 npnode nmnode dc 1 ac 0 pwl 0 0 {t1} 1 2 2 3 3 4 4
v28 npnode nmnode ac 0 45 pwl 0 0 {t1} 1 2 2 3 3 4 4
i29 net1 net2 sffm 0 1 1e6 0 1e3 45
v30 net1 net2 sffm 0 1 1e6 0 1e3 {phase}
i31 net1 net2 sffm 0 1 {freq} 0 1e3 {phase}
v32 net1 net2 sffm 0 1 1e6 0 1e3
i33 net1 net2 sffm 0 1 {freq} 0 1e3 {phase}
v34 net1 net2 dc 1 ac 0 sffm 0 1 {freq} 0 1e3 {phase}
i35 net1 net2 dc 1 ac 0 45 sffm 0 1 {freq} 0 1e3 {phase}
v36 net1 net2 am 0 2 1e3 5e3 1e-6 45
i37 net1 net2 am 0 2 1e3 5e3 1e-6 {phase}
v38 net1 net2 am 0 2 1e3 {freq} 1e-6 {phase}
i39 net1 net2 am 0 2 1e3 5e3 1e-6
v40 net1 net2 am 0 2 1e3 5e3 1e-6 45
i41 net1 net2 dc 1 ac 0 am 0 2 1e3 5e3 1e-6 45
v42 net1 net2 ac 0 45 am 0 2 1e3 5e3 1e-6 45
v43 netp netm dc 1 ac 1 portnum 1 z0 50
v44 netp netm dc 1 ac 1 portnum 1
v45 netp netm dc 1 ac 1 portnum 2 z0 {z0}" -cleanup {
    unset parser
}

test testParserClassIndsources-2 {test Parser class, independent sources parsing, edge case} -setup {
    set file [open [file join $netlistsLoc temp1] w+]
    puts $file ""
    puts $file {v1 neta netp 0 1 2}
    close $file
    set parser [::SpiceGenTcl::Ngspice::Parser new parser1 [file join $netlistsLoc temp1]]
    $parser readFile
    catch {$parser buildNetlist} errorStr
} -body {
    return $errorStr
} -result "-i conflicts with -v" -cleanup {
    file delete [file join $netlistsLoc temp1]
    unset parser errorStr
}

cleanupTests
