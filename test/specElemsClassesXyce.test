lappend auto_path "../"
package require tcltest
package require SpiceGenTcl
namespace import ::tcltest::*
namespace import ::SpiceGenTcl::*
set xyceNameSpc [namespace children ::SpiceGenTcl::Xyce]
foreach nameSpc $xyceNameSpc {
    namespace import ${nameSpc}::*
}


###  Basic devices tests 

####  Resistor class tests 
    
test testResistorClass-1 {test Resistor class} -setup {
    set res [Resistor new 1 netp netm -r 1e3 -tc1 1 -temp 25]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm 1e3 tc1=1 temp=25" -cleanup {
    unset res result
}

test testResistorClass-2 {test Resistor class} -setup {
    set res [Resistor new 1 netp netm -r 1e3]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm 1e3" -cleanup {
    unset res result
}

test testResistorClass-3 {test Resistor class with equation positional parameter} -setup {
    set res [Resistor new 1 netp netm -r {{6*x+y} -eq}]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm \{6*x+y\}" -cleanup {
    unset res result
}

test testResistorClass-4 {test Resistor class with equation positional parameter and combination of normal and equation parameters} -setup {
    set res [Resistor new 1 netp netm -r {{6*x+y} -eq} -tc1 7 -tc2 {"x^2" -eq}]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm \{6*x+y\} tc1=7 tc2=\{x^2\}" -cleanup {
    unset res result
}

test testResistorClass-5 {test Resistor class with behavioural switch} -setup {
    set res [Resistor new 1 netp netm -r "V(a)+V(b)+pow(V(c),2)" -beh -tc1 1]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm r={V(a)+V(b)+pow(V(c),2)} tc1=1" -cleanup {
    unset res result
}    

test testResistorClass-6 {test Resistor class with model switch and resistance value} -setup {
    set res [Resistor new 1 netp netm -r 1 -model resmod -l 1e-6 -temp 25]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm resmod 1 l=1e-6 temp=25" -cleanup {
    unset res result
}

test testResistorClass-7 {test Resistor class with model switch} -setup {
    set res [Resistor new 1 netp netm -model resmod -l 1e-6 -temp 25]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm resmod l=1e-6 temp=25" -cleanup {
    unset res result
}

test testResistorClass-9 {test Resistor class without -r pramater and -model switch} -body {
    catch {Resistor new 1 netp netm} errorStr
    return $errorStr
} -result "Resistor value must be specified with '-r value'" -cleanup {
    unset errorStr
} 

test testResistorClass-2.0 {test Resistor class with behavioural switch with different arguments order} -setup {
    set res [Resistor new 1 netp netm -tc1 1 -r "V(a)+V(b)+pow(V(c),2)" -beh]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm r={V(a)+V(b)+pow(V(c),2)} tc1=1" -cleanup {
    unset res result
} 

####  R class tests 

test testRClass-1 {test R alias for Resistor class} -setup {
    set res [R new 1 netp netm -r 1e3 -tc1 1 -temp 25]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm 1e3 tc1=1 temp=25" -cleanup {
    unset res result
}  
  
test testRClass-2 {test R alias for Resistor class with behavioural switch} -setup {
    set res [R new 1 netp netm -r "V(a)+V(b)+pow(V(c),2)" -beh -tc1 1]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm r={V(a)+V(b)+pow(V(c),2)} tc1=1" -cleanup {
    unset res result
}     
       
test testRClass-3 {test R alias for Resistor class with model switch} -setup {
    set res [R new 1 netp netm -model resmod -l 1e-6 -temp 25]
} -body {
    set result [$res genSPICEString]
} -result "r1 netp netm resmod l=1e-6 temp=25" -cleanup {
    unset res result
} 


####  Capacitor class tests 
    
test testCapacitorClass-1 {test Capacitor class} -setup {
    set cap [Capacitor new 1 netp netm -c 1e-6 -tc1 1 -temp 25]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm 1e-6 tc1=1 temp=25" -cleanup {
    unset cap result
}

test testCapacitorClass-2 {test Capacitor class} -setup {
    set cap [Capacitor new 1 netp netm -c 1e-6]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm 1e-6" -cleanup {
    unset cap result
}

test testCapacitorClass-3 {test Capacitor class witch C behavioural equation} -setup {
    set cap [Capacitor new 1 netp netm -c "V(a)+V(b)+pow(V(c),2)" -beh -tc1 1]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm c={V(a)+V(b)+pow(V(c),2)} tc1=1" -cleanup {
    unset cap result
}
       
test testCapacitorClass-4 {test Capacitor class witch Q behavioural equation} -setup {
    set cap [Capacitor new 1 netp netm -q "V(a)+V(b)+pow(V(c),2)" -beh -tc1 1]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm q={V(a)+V(b)+pow(V(c),2)} tc1=1" -cleanup {
    unset cap result
}         

test testCapacitorClass-5 {test Capacitor class with model switch} -setup {
    set cap [Capacitor new 1 netp netm -model capmod -l 1e-6 -w 10e-6 -temp 25]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm capmod l=1e-6 w=10e-6 temp=25" -cleanup {
    unset cap result
}

test testCapacitorClass-6 {test apacitor class with model switch and value} -setup {
    set cap [Capacitor new 1 netp netm -c 1 -model capmod -l 1e-6 -w 10e-6 -temp 25]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm capmod 1 l=1e-6 w=10e-6 temp=25" -cleanup {
    unset cap result
}  

test testCapacitorClass-7 {test Capacitor class without capacitance value, error generated} -body {
    catch {Capacitor new 1 netp netm} errorStr
    return $errorStr
} -result "Capacitor value must be specified with '-c value'" -cleanup {
    unset errorStr
} 

test testCapacitorClass-8 {test Capacitor class} -body {
    catch {Capacitor new 1 netp netm -beh} errorStr
    return $errorStr
} -result "Capacitor value must be specified with '-c value'" -cleanup {
    unset errorStr
} 

####  C class tests 

test testCClass-1 {test C alias for Capacitor class witch C behavioural equation} -setup {
    set cap [C new 1 netp netm -c "V(a)+V(b)+pow(V(c),2)" -beh -tc1 1]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm c={V(a)+V(b)+pow(V(c),2)} tc1=1" -cleanup {
    unset cap result
}

test testClass-2 {test C alias for Capacitor class with Q behavioural equation} -setup {
    set cap [C new 1 netp netm -q "V(a)+V(b)+pow(V(c),2)" -beh -tc1 1]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm q={V(a)+V(b)+pow(V(c),2)} tc1=1" -cleanup {
    unset cap result
}         

test testCClass-3 {test C alias for Capacitor class with model switch} -setup {
    set cap [C new 1 netp netm -model capmod -l 1e-6 -w 10e-6 -temp 25]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm capmod l=1e-6 w=10e-6 temp=25" -cleanup {
    unset cap result
}

test testCClass-4 {test C alias for Capacitor class} -setup {
    set cap [C new 1 netp netm -c 1e-6 -tc1 1 -temp 25]
} -body {
    set result [$cap genSPICEString]
} -result "c1 netp netm 1e-6 tc1=1 temp=25" -cleanup {
    unset cap result
}

####  Inductor class tests 
    
test testInductorClass-1 {test Inductor class} -setup {
    set ind [Inductor new 1 netp netm -l 1e-6 -tc1 1 -temp 25]
} -body {
    set result [$ind genSPICEString]
} -result "l1 netp netm 1e-6 tc1=1 temp=25" -cleanup {
    unset ind result
}

test testInductorClass-2 {test Inductor class} -setup {
    set ind [Inductor new 1 netp netm -l 1e-6]
} -body {
    set result [$ind genSPICEString]
} -result "l1 netp netm 1e-6" -cleanup {
    unset ind result
}

test testInductorClass-3 {test Inductor class with model switch} -setup {
    set ind [Inductor new 1 netp netm -l 1e-6 -model indm]
} -body {
    set result [$ind genSPICEString]
} -result "l1 netp netm indm 1e-6" -cleanup {
    unset ind result
}

####  L class tests 

test testLClass-1 {test L alias for Inductor class} -setup {
    set ind [L new 1 netp netm -l 1e-6 -tc1 1 -temp 25]
} -body {
    set result [$ind genSPICEString]
} -result "l1 netp netm 1e-6 tc1=1 temp=25" -cleanup {
    unset ind result
}
  
    
####  VSwitch class tests 
    
test testVSwitchClass-1 {test VSwitch class} -setup {
    set vsw [VSwitch new 1 net1 0 netc 0 -model sw1 -on]
} -body {
    set result [$vsw genSPICEString]
} -result "s1 net1 0 netc 0 sw1 on" -cleanup {
    unset vsw result
}

test testVSwitchClass-2 {test VSwitch class} -setup {
    set vsw [VSwitch new 1 net1 0 netc 0 -model sw1]
} -body {
    set result [$vsw genSPICEString]
} -result "s1 net1 0 netc 0 sw1" -cleanup {
    unset vsw result
}

test testVSwitchClass-3 {test VSwitch class with different arguments order} -setup {
    set vsw [VSwitch new 1 net1 0 netc 0 -on -model sw1]
} -body {
    set result [$vsw genSPICEString]
} -result "s1 net1 0 netc 0 sw1 on" -cleanup {
    unset vsw result
}

test testVSwitchClass-3 {test VSwitch class} -body {
    catch {set vsw [VSwitch new 1 net1 0 netc 0 -model sw1 -on -off]} errorStr
    return $errorStr
} -result "-on conflicts with -off" -cleanup {
    unset errorStr
}

####  CSwitch class tests 
    
test testCSwitchClass-1 {test CSwitch class} -setup {
    set csw [CSwitch new 1 net1 0 -icntrl v1 -model sw1 -on]
} -body {
    set result [$csw genSPICEString]
} -result "w1 net1 0 v1 sw1 on" -cleanup {
    unset csw result
}

test testCSwitchClass-2 {test CSwitch class} -setup {
    set csw [CSwitch new 1 net1 0 -icntrl v1 -model sw1]
} -body {
    set result [$csw genSPICEString]
} -result "w1 net1 0 v1 sw1" -cleanup {
    unset csw result
}
    
####  GenSwitch class tests 
    
test testGenSwitchClass-1 {test GenSwitch class} -setup {
    set csw [GenSwitch new 1 net1 0 -model sw1 -control {I(VMON)}]
} -body {
    set result [$csw genSPICEString]
} -result "s1 net1 0 sw1 control={I(VMON)}" -cleanup {
    unset csw result
}

####  GenS class tests 

test testGenSClass-2 {test GenS class} -setup {
    set csw [GenS new 1 net1 0 -model sw1 -control {I(VMON)}]
} -body {
    set result [$csw genSPICEString]
} -result "s1 net1 0 sw1 control={I(VMON)}" -cleanup {
    unset csw result
}    
    
###  Sources classes tests 
    
####  Vdc class test 

test testVdcClass-1 {test Vdc class} -setup {
    set vdc [Vdc new 1 netp netm -dc 10]
} -body {
    set result [$vdc genSPICEString]
} -result "v1 netp netm 10" -cleanup {
    unset vdc result
}

test testVdcClass-2 {test Vdc class} -setup {
    set vdc [Vdc new 1 netp netm -dc {vnom -eq}]
} -body {
    set result [$vdc genSPICEString]
} -result "v1 netp netm {vnom}" -cleanup {
    unset vdc result
}

####  Vac class test 

test testVacClass-1 {test Vac class} -setup {
    set vac [Vac new 1 netp netm -ac 10]
} -body {
    set result [$vac genSPICEString]
} -result "v1 netp netm ac 10" -cleanup {
    unset vac result
}

test testVacClass-2 {test Vac class} -setup {
    set vac [Vac new 1 netp netm -ac 10 -acphase 45]
} -body {
    set result [$vac genSPICEString]
} -result "v1 netp netm ac 10 45" -cleanup {
    unset vac result
}

test testVacClass-3 {test Vac class} -setup {
    set vac [Vac new 1 netp netm -ac 10 -acphase {phase -eq}]
} -body {
    set result [$vac genSPICEString]
} -result "v1 netp netm ac 10 \{phase\}" -cleanup {
    unset vac result
}

test testVacClass-4 {test Vac class} -setup {
    set vac [Vac new 1 netp netm -ac {acmag -eq} -acphase 45]
} -body {
    set result [$vac genSPICEString]
} -result "v1 netp netm ac {acmag} 45" -cleanup {
    unset vac result
}
    
####  Vpulse class test 

test testVpulseClass-1 {test Vpulse class} -setup {
    set vpulse [Vpulse new 1 net1 net2 -low 0 -high 1 -td 1e-9 -tr 1e-9 -tf 1e-9 -pw 10e-6 -per 20e-6]
} -body {
    set result [$vpulse genSPICEString]
} -result "v1 net1 net2 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset vpulse result
}

test testVpulseClass-2 {test Vpulse class} -setup {
    set vpulse [Vpulse new 1 net1 net2 -low 0 -high 1 -td 1e-9 -tr 1e-9 -tf 1e-9 -pw 10e-6 -per 20e-6]
} -body {
    set result [$vpulse genSPICEString]
} -result "v1 net1 net2 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset vpulse result
}

test testVpulseClass-3 {test Vpulse class} -setup {
    set vpulse [Vpulse new 1 net1 net2 -low 0 -high 1 -td {td -eq} -tr 1e-9 -tf 1e-9 -pw 10e-6 -per 20e-6]
} -body {
    set result [$vpulse genSPICEString]
} -result "v1 net1 net2 pulse 0 1 \{td\} 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset vpulse result
}

test testVpulseClass-4 {test Vpulse class} -setup {
    set vpulse [Vpulse new 1 net1 net2 -low 0 -high 1 -td {td -eq} -tr 1e-9 -tf 1e-9 -pw 10e-6 -per 20e-6]
} -body {
    set result [$vpulse genSPICEString]
} -result "v1 net1 net2 pulse 0 1 {td} 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset vpulse result
}

test testVpulseClass-5 {test Vpulse class with different order} -setup {
    set vpulse [Vpulse new 1 net1 net2 -tf 1e-9 -pw 10e-6 -per 20e-6 -low 0 -high 1 -td 1e-9 -tr 1e-9]
} -body {
    set result [$vpulse genSPICEString]
} -result "v1 net1 net2 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset vpulse result
}

####  Vsin class test 


test testVsinClass-1 {test Vsin class} -setup {
    set vsin [Vsin new 1 net1 net2 -v0 0 -va 2 -freq 50 -td 1e-6]
} -body {
    set result [$vsin genSPICEString]
} -result "v1 net1 net2 sin 0 2 50 1e-6" -cleanup {
    unset vsin result
}

test testVsinClass-2 {test Vsin class} -setup {
    set vsin [Vsin new 1 net1 net2 -v0 0 -va 2 -freq 50 -td 1e-6 -theta {theta -eq}]
} -body {
    set result [$vsin genSPICEString]
} -result "v1 net1 net2 sin 0 2 50 1e-6 \{theta\}" -cleanup {
    unset vsin result
}

test testVsinClass-3 {test Vsin class} -setup {
    set vsin [Vsin new 1 net1 net2 -v0 0 -va 2 -freq {freq -eq} -td 1e-6 -theta {theta -eq}]
} -body {
    set result [$vsin genSPICEString]
} -result "v1 net1 net2 sin 0 2 \{freq\} 1e-6 \{theta\}" -cleanup {
    unset vsin result
}

test testVsinClass-4 {test Vsin class} -setup {
    set vsin [Vsin new 1 net1 net2 -v0 0 -va 2 -freq 50]
} -body {
    set result [$vsin genSPICEString]
} -result "v1 net1 net2 sin 0 2 50" -cleanup {
    unset vsin result
}

test testVsinClass-5 {test Vsin class with different order} -setup {
    set vsin [Vsin new 1 net1 net2 -v0 0 -theta {theta -eq} -va 2 -freq 50 -td 1e-6 ]
} -body {
    set result [$vsin genSPICEString]
} -result "v1 net1 net2 sin 0 2 50 1e-6 \{theta\}" -cleanup {
    unset vsin result
}

####  Vexp class test 

test testVexpClass-1 {test Vexp class} -setup {
    set vexp [Vexp new 1 net1 net2 -v1 0 -v2 1 -td1 1e-9 -tau1 1e-9 -td2 1e-9 -tau2 10e-6]
} -body {
    set result [$vexp genSPICEString]
} -result "v1 net1 net2 exp 0 1 1e-9 1e-9 1e-9 10e-6" -cleanup {
    unset vexp result
}
    
test testVexpClass-2 {test Vexp class} -setup {
    set vexp [Vexp new 1 net1 net2 -v1 0 -v2 1 -td1 1e-9 -tau1 1e-9 -td2 {td2 -eq} -tau2 10e-6]
} -body {
    set result [$vexp genSPICEString]
} -result "v1 net1 net2 exp 0 1 1e-9 1e-9 \{td2\} 10e-6" -cleanup {
    unset vexp result
}

test testVexpClass-3 {test Vexp class with different order} -setup {
    set vexp [Vexp new 1 net1 net2 -v1 0 -tau1 1e-9 -v2 1 -td2 1e-9 -td1 1e-9 -tau2 10e-6]
} -body {
    set result [$vexp genSPICEString]
} -result "v1 net1 net2 exp 0 1 1e-9 1e-9 1e-9 10e-6" -cleanup {
    unset vexp result
}
    
####  Vpwl class test 

test testVpwlClass-1 {test Vpwl class} -setup {
    set vpwl [Vpwl new 1 npNode nmNode -seq {0 0 {t1 -eq} 1 2 2 3 3 4 4}]
} -body {
    set result [$vpwl genSPICEString]
} -result "v1 npnode nmnode pwl 0 0 \{t1\} 1 2 2 3 3 4 4" -cleanup {
    unset vpwl result
}  
    
test testVpwlClass-2 {test Vpwl class} -setup {
    catch {Vpwl new 1 npNode nmNode -seq {0 0 {t1 -eq} 1 2 2 3 3 4}} errorStr
} -body {
    return $errorStr
} -result "Number of elements '9' in pwl sequence is odd in element 'v1', must be even" -cleanup {
    unset errorStr
}

test testVpwlClass-3 {test Vpwl class} -setup {
    catch {Vpwl new 1 npNode nmNode -seq {0 0}} errorStr
} -body {
    return $errorStr
} -result "Number of elements '2' in pwl sequence in element 'v1' must be >=4" -cleanup {
    unset errorStr
}

####  Vsffm class test 
                
test testVsffmClass-1 {test Vsffm class} -setup {
    set vsffm [Vsffm new 1 net1 net2 -v0 0 -va 1 -fc 1e6 -mdi 0 -fs 1e3]
} -body {
    set result [$vsffm genSPICEString]
} -result "v1 net1 net2 sffm 0 1 1e6 0 1e3" -cleanup {
    unset vsffm result
}

test testVsffmClass-2 {test Vsffm class} -setup {
    set vsffm [Vsffm new 1 net1 net2 -v0 0 -va 1 -fc 1e6 -mdi 0 -fs 1e3]
} -body {
    set result [$vsffm genSPICEString]
} -result "v1 net1 net2 sffm 0 1 1e6 0 1e3" -cleanup {
    unset vsffm result
}

test testVsffmClass-3 {test Vsffm class} -setup {
    set vsffm [Vsffm new 1 net1 net2 -v0 0 -va 1 -fc {freq -eq} -mdi 0 -fs 1e3]
} -body {
    set result [$vsffm genSPICEString]
} -result "v1 net1 net2 sffm 0 1 \{freq\} 0 1e3" -cleanup {
    unset vsffm result
}

test testVsffmClass-4 {test Vsffm class} -setup {
    set vsffm [Vsffm new 1 net1 net2 -v0 0 -va 1 -fc 1e6 -mdi 0 -fs 1e3]
} -body {
    set result [$vsffm genSPICEString]
} -result "v1 net1 net2 sffm 0 1 1e6 0 1e3" -cleanup {
    unset vsffm result
}

test testVsffmClass-5 {test Vsffm class with different order} -setup {
    set vsffm [Vsffm new 1 net1 net2 -v0 0 -fs 1e3 -va 1 -fc {freq -eq} -mdi 0]
} -body {
    set result [$vsffm genSPICEString]
} -result "v1 net1 net2 sffm 0 1 \{freq\} 0 1e3" -cleanup {
    unset vsffm result
}
    
####  Idc class test 

test testIdcClass-1 {test Idc class} -setup {
    set idc [Idc new 1 netp netm -dc 10]
} -body {
    set result [$idc genSPICEString]
} -result "i1 netp netm 10" -cleanup {
    unset idc result
}
    
test testIdcClass-2 {test Idc class} -setup {
    set idc [Idc new 1 netp netm -dc {inom -eq}]
} -body {
    set result [$idc genSPICEString]
} -result "i1 netp netm {inom}" -cleanup {
    unset idc result
}
    
####  Iac class test 
    
test testIacClass-1 {test Iac class} -setup {
    set iac [Iac new 1 netp netm -ac 10]
} -body {
    set result [$iac genSPICEString]
} -result "i1 netp netm ac 10" -cleanup {
    unset iac result
}

test testIacClass-2 {test Iac class} -setup {
    set iac [Iac new 1 netp netm -ac 10 -acphase 45]
} -body {
    set result [$iac genSPICEString]
} -result "i1 netp netm ac 10 45" -cleanup {
    unset iac result
}

test testIacClass-3 {test Iac class} -setup {
    set iac [Iac new 1 netp netm -ac 10 -acphase {phase -eq}]
} -body {
    set result [$iac genSPICEString]
} -result "i1 netp netm ac 10 \{phase\}" -cleanup {
    unset iac result
}

test testIacClass-4 {test Iac class} -setup {
    set iac [Iac new 1 netp netm -ac {acmag -eq} -acphase 45]
} -body {
    set result [$iac genSPICEString]
} -result "i1 netp netm ac {acmag} 45" -cleanup {
    unset iac result
}

####  Ipulse class test 

test testIpulseClass-1 {test Ipulse class} -setup {
    set ipulse [Ipulse new 1 net1 net2 -low 0 -high 1 -td 1e-9 -tr 1e-9 -tf 1e-9 -pw 10e-6 -per 20e-6]
} -body {
    set result [$ipulse genSPICEString]
} -result "i1 net1 net2 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset ipulse result
}

test testIpulseClass-2 {test Ipulse class} -setup {
    set ipulse [Ipulse new 1 net1 net2 -low 0 -high 1 -td 1e-9 -tr 1e-9 -tf 1e-9 -pw 10e-6 -per 20e-6]
} -body {
    set result [$ipulse genSPICEString]
} -result "i1 net1 net2 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset ipulse result
}

test testIpulseClass-3 {test Ipulse class} -setup {
    set ipulse [Ipulse new 1 net1 net2 -low 0 -high 1 -td {td -eq} -tr 1e-9 -tf 1e-9 -pw 10e-6 -per 20e-6]
} -body {
    set result [$ipulse genSPICEString]
} -result "i1 net1 net2 pulse 0 1 \{td\} 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset ipulse result
}

test testIpulseClass-4 {test Ipulse class} -setup {
    set ipulse [Ipulse new 1 net1 net2 -low 0 -high 1 -td {td -eq} -tr 1e-9 -tf 1e-9 -pw 10e-6 -per 20e-6]
} -body {
    set result [$ipulse genSPICEString]
} -result "i1 net1 net2 pulse 0 1 {td} 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset ipulse result
}

test testIpulseClass-5 {test Ipulse class with different order} -setup {
    set ipulse [Ipulse new 1 net1 net2 -tf 1e-9 -pw 10e-6 -per 20e-6 -low 0 -high 1 -td 1e-9 -tr 1e-9]
} -body {
    set result [$ipulse genSPICEString]
} -result "i1 net1 net2 pulse 0 1 1e-9 1e-9 1e-9 10e-6 20e-6" -cleanup {
    unset ipulse result
}

####  Isin class test 


test testIsinClass-1 {test Isin class} -setup {
    set isin [Isin new 1 net1 net2 -v0 0 -va 2 -freq 50 -td 1e-6]
} -body {
    set result [$isin genSPICEString]
} -result "i1 net1 net2 sin 0 2 50 1e-6" -cleanup {
    unset isin result
}

test testIsinClass-2 {test Isin class} -setup {
    set isin [Isin new 1 net1 net2 -v0 0 -va 2 -freq 50 -td 1e-6 -theta {theta -eq}]
} -body {
    set result [$isin genSPICEString]
} -result "i1 net1 net2 sin 0 2 50 1e-6 \{theta\}" -cleanup {
    unset isin result
}

test testIsinClass-3 {test Isin class} -setup {
    set isin [Isin new 1 net1 net2 -v0 0 -va 2 -freq {freq -eq} -td 1e-6 -theta {theta -eq}]
} -body {
    set result [$isin genSPICEString]
} -result "i1 net1 net2 sin 0 2 \{freq\} 1e-6 \{theta\}" -cleanup {
    unset isin result
}

test testIsinClass-4 {test Isin class} -setup {
    set isin [Isin new 1 net1 net2 -v0 0 -va 2 -freq 50]
} -body {
    set result [$isin genSPICEString]
} -result "i1 net1 net2 sin 0 2 50" -cleanup {
    unset isin result
}

test testIsinClass-5 {test Isin class with different order} -setup {
    set isin [Isin new 1 net1 net2 -v0 0 -theta {theta -eq} -va 2 -freq 50 -td 1e-6 ]
} -body {
    set result [$isin genSPICEString]
} -result "i1 net1 net2 sin 0 2 50 1e-6 \{theta\}" -cleanup {
    unset isin result
}

####  Iexp class test 

test testIexpClass-1 {test Iexp class} -setup {
    set iexp [Iexp new 1 net1 net2 -v1 0 -v2 1 -td1 1e-9 -tau1 1e-9 -td2 1e-9 -tau2 10e-6]
} -body {
    set result [$iexp genSPICEString]
} -result "i1 net1 net2 exp 0 1 1e-9 1e-9 1e-9 10e-6" -cleanup {
    unset iexp result
}
    
test testIexpClass-2 {test Iexp class} -setup {
    set iexp [Iexp new 1 net1 net2 -v1 0 -v2 1 -td1 1e-9 -tau1 1e-9 -td2 {td2 -eq} -tau2 10e-6]
} -body {
    set result [$iexp genSPICEString]
} -result "i1 net1 net2 exp 0 1 1e-9 1e-9 \{td2\} 10e-6" -cleanup {
    unset iexp result
}

test testIexpClass-3 {test Iexp class with different order} -setup {
    set iexp [Iexp new 1 net1 net2 -v1 0 -tau1 1e-9 -v2 1 -td2 1e-9 -td1 1e-9 -tau2 10e-6]
} -body {
    set result [$iexp genSPICEString]
} -result "i1 net1 net2 exp 0 1 1e-9 1e-9 1e-9 10e-6" -cleanup {
    unset iexp result
}
    
####  Ipwl class test 

test testIpwlClass-1 {test Ipwl class} -setup {
    set vpwl [Ipwl new 1 npNode nmNode -seq {0 0 {t1 -eq} 1 2 2 3 3 4 4}]
} -body {
    set result [$vpwl genSPICEString]
} -result "i1 npnode nmnode pwl 0 0 \{t1\} 1 2 2 3 3 4 4" -cleanup {
    unset vpwl result
}  
    
test testIpwlClass-2 {test Ipwl class} -setup {
    catch {Ipwl new 1 npNode nmNode -seq {0 0 {t1 -eq} 1 2 2 3 3 4}} errorStr
} -body {
    return $errorStr
} -result "Number of elements '9' in pwl sequence is odd in element 'i1', must be even" -cleanup {
    unset errorStr
}

test testIpwlClass-3 {test Ipwl class} -setup {
    catch {Ipwl new 1 npNode nmNode -seq {0 0}} errorStr
} -body {
    return $errorStr
} -result "Number of elements '2' in pwl sequence in element 'i1' must be >=4" -cleanup {
    unset errorStr
}

####  Isffm class test 
                
test testIsffmClass-1 {test Isffm class} -setup {
    set isffm [Isffm new 1 net1 net2 -v0 0 -va 1 -fc 1e6 -mdi 0 -fs 1e3]
} -body {
    set result [$isffm genSPICEString]
} -result "i1 net1 net2 sffm 0 1 1e6 0 1e3" -cleanup {
    unset isffm result
}

test testIsffmClass-2 {test Isffm class} -setup {
    set isffm [Isffm new 1 net1 net2 -v0 0 -va 1 -fc 1e6 -mdi 0 -fs 1e3]
} -body {
    set result [$isffm genSPICEString]
} -result "i1 net1 net2 sffm 0 1 1e6 0 1e3" -cleanup {
    unset isffm result
}

test testIsffmClass-3 {test Isffm class} -setup {
    set isffm [Isffm new 1 net1 net2 -v0 0 -va 1 -fc {freq -eq} -mdi 0 -fs 1e3]
} -body {
    set result [$isffm genSPICEString]
} -result "i1 net1 net2 sffm 0 1 \{freq\} 0 1e3" -cleanup {
    unset isffm result
}

test testIsffmClass-4 {test Isffm class} -setup {
    set isffm [Isffm new 1 net1 net2 -v0 0 -va 1 -fc 1e6 -mdi 0 -fs 1e3]
} -body {
    set result [$isffm genSPICEString]
} -result "i1 net1 net2 sffm 0 1 1e6 0 1e3" -cleanup {
    unset isffm result
}

test testIsffmClass-5 {test Isffm class with different order} -setup {
    set isffm [Isffm new 1 net1 net2 -v0 0 -fs 1e3 -va 1 -fc {freq -eq} -mdi 0]
} -body {
    set result [$isffm genSPICEString]
} -result "i1 net1 net2 sffm 0 1 \{freq\} 0 1e3" -cleanup {
    unset isffm result
}
    
####  Vccs class tests 
    
test testVccsClass-1 {test Vccs class} -setup {
    set vccs [Vccs new 1 net1 0 netc 0 -trcond 10 -m 1]
} -body {
    set result [$vccs genSPICEString]
} -result "g1 net1 0 netc 0 10 m=1" -cleanup {
    unset vccs result
}

test testVccsClass-2 {test Vccs class} -setup {
    set vccs [Vccs new 1 net1 0 netc 0 -trcond 10]
} -body {
    set result [$vccs genSPICEString]
} -result "g1 net1 0 netc 0 10" -cleanup {
    unset vccs result
}

test testVccsClass-2 {test Vccs class} -setup {
    set vccs [Vccs new 1 net1 0 netc 0 -trcond {trcond -eq}]
} -body {
    set result [$vccs genSPICEString]
} -result "g1 net1 0 netc 0 \{trcond\}" -cleanup {
    unset vccs result
}

####  G class tests 

test testGClass-1 {test G class} -setup {
    set g [G new 1 net1 0 netc 0 -trcond 10 -m 1]
} -body {
    set result [$g genSPICEString]
} -result "g1 net1 0 netc 0 10 m=1" -cleanup {
    unset g result
}
    
####  Vcvs class tests 
    
test testVcvsClass-1 {test Vcvs class} -setup {
    set vcvs [Vcvs new 1 net1 0 netc 0 -gain 10]
} -body {
    set result [$vcvs genSPICEString]
} -result "e1 net1 0 netc 0 10" -cleanup {
    unset vcvs result
}

test testVcvsClass-2 {test Vcvs class} -setup {
    set vcvs [Vcvs new 1 net1 0 netc 0 -gain 10]
} -body {
    set result [$vcvs genSPICEString]
} -result "e1 net1 0 netc 0 10" -cleanup {
    unset vcvs result
}

test testVcvsClass-3 {test Vcvs class} -setup {
    set vcvs [Vcvs new 1 net1 0 netc 0 -gain {vgain -eq}]
} -body {
    set result [$vcvs genSPICEString]
} -result "e1 net1 0 netc 0 \{vgain\}" -cleanup {
    unset vcvs result
}

####  E class tests 

test testEClass-1 {test G class} -setup {
    set e [E new 1 net1 0 netc 0 -gain 10]
} -body {
    set result [$e genSPICEString]
} -result "e1 net1 0 netc 0 10" -cleanup {
    unset e result
}
    
####  Cccs class tests 
    
test testCccsClass-1 {test Cccs class} -setup {
    set cccs [Cccs new 1 net1 0 -consrc vc -gain 10 -m 1]
} -body {
    set result [$cccs genSPICEString]
} -result "f1 net1 0 vc 10 m=1" -cleanup {
    unset cccs result
}

test testCccsClass-2 {test Cccs class} -setup {
    set cccs [Cccs new 1 net1 0 -consrc vc -gain 10]
} -body {
    set result [$cccs genSPICEString]
} -result "f1 net1 0 vc 10" -cleanup {
    unset cccs result
}

test testCccsClass-3 {test Cccs class} -setup {
    set cccs [Cccs new 1 net1 0 -consrc vc -gain {gain -eq}]
} -body {
    set result [$cccs genSPICEString]
} -result "f1 net1 0 vc \{gain\}" -cleanup {
    unset cccs result
}

####  F class tests 

test testFClass-1 {test F class} -setup {
    set f [F new 1 net1 0 -consrc vc -gain 10 -m 1]
} -body {
    set result [$f genSPICEString]
} -result "f1 net1 0 vc 10 m=1" -cleanup {
    unset f result
}
    
####  Ccvs class tests 
    
test testCcvsClass-1 {test Ccvs class} -setup {
    set ccvs [Ccvs new 1 net1 0 -consrc vc -transr 10]
} -body {
    set result [$ccvs genSPICEString]
} -result "h1 net1 0 vc 10" -cleanup {
    unset ccvs result
}

test testCcvsClass-2 {test Ccvs class} -setup {
    set ccvs [Ccvs new 1 net1 0 -consrc vc -transr 10]
} -body {
    set result [$ccvs genSPICEString]
} -result "h1 net1 0 vc 10" -cleanup {
    unset ccvs result
}

test testCcvsClass-3 {test Ccvs class} -setup {
    set ccvs [Ccvs new 1 net1 0 -consrc vc -transr {tres -eq}]
} -body {
    set result [$ccvs genSPICEString]
} -result "h1 net1 0 vc \{tres\}" -cleanup {
    unset ccvs result
}

####  H class tests 

test testHClass-1 {test H class} -setup {
    set h [H new 1 net1 0 -consrc vc -transr 10]
} -body {
    set result [$h genSPICEString]
} -result "h1 net1 0 vc 10" -cleanup {
    unset h result
}

####  BehaviouralSource class tests 
    
test testBehaviouralSourceClass-1 {test BehaviouralSource class} -setup {
    set b [BehaviouralSource new 1 netp netm -i "V(a)+V(b)+pow(V(c),2)"]
} -body {
    set result [$b genSPICEString]
} -result "b1 netp netm i={V(a)+V(b)+pow(V(c),2)}" -cleanup {
    unset b result
} 
    
test testBehaviouralSourceClass-2 {test BehaviouralSource class} -setup {
    set b [BehaviouralSource new 1 netp netm -v "V(a)+V(b)+pow(V(c),2)" -smoothbsrc]
} -body {
    set result [$b genSPICEString]
} -result "b1 netp netm v={V(a)+V(b)+pow(V(c),2)} smoothbsrc=1" -cleanup {
    unset b result
} 

test testBehaviouralSourceClass-3 {test BehaviouralSource class with different argument order} -setup {
    set b [BehaviouralSource new 1 netp netm -rcconst 1e-9 -v "V(a)+V(b)+pow(V(c),2)"]
} -body {
    set result [$b genSPICEString]
} -result "b1 netp netm v={V(a)+V(b)+pow(V(c),2)} rcconst=1e-9" -cleanup {
    unset b result
}  

####  B class tests 

test testBClass-1 {test B class} -setup {
    set b [B new 1 netp netm -v "V(a)+V(b)+pow(V(c),2)" -smoothbsrc -rcconst 1e-9]
} -body {
    set result [$b genSPICEString]
} -result "b1 netp netm v={V(a)+V(b)+pow(V(c),2)} smoothbsrc=1 rcconst=1e-9" -cleanup {
    unset b result
}

###  Semiconductor devices classes tests 

####  Diode class tests 
    
test testDiodeClass-1 {test Diode class} -setup {
    set dio [Diode new 1 netp netm -model diomod -area 1e-3 -temp 25]
} -body {
    set result [$dio genSPICEString]
} -result "d1 netp netm diomod 1e-3 temp=25" -cleanup {
    unset dio result
}

test testDiodeClass-2 {test Diode class} -setup {
    set dio [Diode new 1 netp netm -model diomod -area 1e-3 -pj 1 -temp 25]
} -body {
    set result [$dio genSPICEString]
} -result "d1 netp netm diomod 1e-3 1 temp=25" -cleanup {
    unset dio result
}

test testDiodeClass-4 {test Diode class} -setup {
    set dio [Diode new 1 netp netm -model diomod -area {area -eq} -pj 1 -temp 25]
} -body {
    set result [$dio genSPICEString]
} -result "d1 netp netm diomod {area} 1 temp=25" -cleanup {
    unset dio result
}

test testDiodeClass-5 {test Diode class} -setup {
    set dio [Diode new 1 netp netm -model diomod -temp 25 -custparams ab 1e-12 lg {lg -eq} ls 1e-6]
} -body {
    set result [$dio genSPICEString]
} -result "d1 netp netm diomod temp=25 ab=1e-12 lg={lg} ls=1e-6" -cleanup {
    unset dio result
}

####  D class tests 

test testDClass-1 {test RSem alias for Diode class} -setup {
    set dio [D new 1 netp netm -model diomod -area 1e-3 -temp 25]
} -body {
    set result [$dio genSPICEString]
} -result "d1 netp netm diomod 1e-3 temp=25" -cleanup {
    unset dio result
}
    
####  Bjt class tests 
    
test testBjtClass-1 {test Bjt class} -setup {
    set bjt [Bjt new 1 netc netb nete -model bjtmod -area 1e-3]
} -body {
    set result [$bjt genSPICEString]
} -result "q1 netc netb nete bjtmod 1e-3" -cleanup {
    unset bjt result
}

test testBjtClass-2 {test Bjt class} -setup {
    set bjt [Bjt new 1 netc netb nete -model bjtmod -ns nets -area 1e-3]
} -body {
    set result [$bjt genSPICEString]
} -result "q1 netc netb nete \[nets\] bjtmod 1e-3" -cleanup {
    unset bjt result
}

test testBjtClass-3 {test Bjt class} -setup {
    set bjt [Bjt new 1 netc netb nete -model bjtmod -ns nets -tj nettj -area 1e-3 -temp 25]
} -body {
    set result [$bjt genSPICEString]
} -result "q1 netc netb nete \[nets\] nettj bjtmod 1e-3 temp=25" -cleanup {
    unset bjt result
}

test testBjtClass-4 {test Bjt class} -setup {
    set bjt [Bjt new 1 netc netb nete -model bjtmod -ns nets -tj nettj -area 1e-3 -temp 25 -ic1 1 -ic2 2]
} -body {
    set result [$bjt genSPICEString]
} -result "q1 netc netb nete \[nets\] nettj bjtmod 1e-3 temp=25 ic1=1 ic2=2" -cleanup {
    unset bjt result
}

####  Q class tests 

test testQClass-1 {test Q class} -setup {
    set bjt [Q new 1 netc netb nete -model bjtmod -area 1e-3 -temp 25]
} -body {
    set result [$bjt genSPICEString]
} -result "q1 netc netb nete bjtmod 1e-3 temp=25" -cleanup {
    unset bjt result
}
    
    
####  Jfet class tests 
    
test testJfetClass-1 {test Jfet class} -setup {
    set jfet [Jfet new 1 netd netg nets -model jfetmod -area 1e-3 -temp 25]
} -body {
    set result [$jfet genSPICEString]
} -result "j1 netd netg nets jfetmod 1e-3 temp=25" -cleanup {
    unset jfet result
}

####  J class tests 

test testJClass-1 {test J class} -setup {
    set jfet [J new 1 netd netg nets -model jfetmod -area {area*2 -eq} -temp 25]
} -body {
    set result [$jfet genSPICEString]
} -result "j1 netd netg nets jfetmod {area*2} temp=25" -cleanup {
    unset jfet result
}
    

test testJClass-2 {test J class} -setup {
    set jfet [J new 1 netd netg nets -model jfetmod -area {area*2 -eq} -temp 25]
} -body {
    set result [$jfet genSPICEString]
} -result "j1 netd netg nets jfetmod {area*2} temp=25" -cleanup {
    unset jfet result
}
    
####  Mesfet class tests 
    
test testMesfetClass-1 {test Mesfet class} -setup {
    set mesfet [Mesfet new 1 netd netg nets -model mesfetmod -area 1e-3]
} -body {
    set result [$mesfet genSPICEString]
} -result "z1 netd netg nets mesfetmod 1e-3" -cleanup {
    unset mesfet result
}

test testMesfetClass-2 {test Mesfet class} -setup {
    set mesfet [Mesfet new 1 netd netg nets -model mesfetmod -area {area -eq}]
} -body {
    set result [$mesfet genSPICEString]
} -result "z1 netd netg nets mesfetmod {area}" -cleanup {
    unset mesfet result
}

####  Z class tests 

test testZClass-1 {test J class} -setup {
    set mesfet [Z new 1 netd netg nets -model mesfetmod -area {area*2 -eq}]
} -body {
    set result [$mesfet genSPICEString]
} -result "z1 netd netg nets mesfetmod {area*2}" -cleanup {
    unset mesfet result
}

####  Mosfet class tests 
    
test testMosfetClass-1 {test Mosfet class} -setup {
    set mosfet [Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets mosfetmod l=1e-6 w=10e-3" -cleanup {
    unset mosfet result
}

test testMosfetClass-2 {test Mosfet class} -setup {
    set mosfet [Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets netsub mosfetmod l=1e-6 w=10e-3" -cleanup {
    unset mosfet result
}

test testMosfetClass-3 {test Mosfet class} -setup {
    set mosfet [Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub -n5 net5]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets netsub net5 mosfetmod l=1e-6 w=10e-3" -cleanup {
    unset mosfet result
}

test testMosfetClass-4 {test Mosfet class} -setup {
    set mosfet [Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub -n5 net5 -n6 net6]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets netsub net5 net6 mosfetmod l=1e-6 w=10e-3" -cleanup {
    unset mosfet result
}

test testMosfetClass-5 {test Mosfet class} -setup {
    set mosfet [Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub -n5 net5 -n6 net6 -n7 net7]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets netsub net5 net6 net7 mosfetmod l=1e-6 w=10e-3" -cleanup {
    unset mosfet result
}

test testMosfetClass-6 {test Mosfet class} -setup {
    catch {Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub -n6 net6 -n7 net7} errorStr
} -body {
    set result $errorStr
} -result "-n6 requires -n5" -cleanup {
    unset result
}

test testMosfetClass-7 {test Mosfet class} -setup {
    catch {Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n5 net5 -n6 net6 -n7 net7} errorStr
} -body {
    set result $errorStr
} -result "-n5 requires -n4" -cleanup {
    unset result
}

test testMosfetClass-8 {test Mosfet class} -setup {
    set mosfet [Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub -n5 net5 -n6 net6 -n7 net7 -ic {1 2 3}]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets netsub net5 net6 net7 mosfetmod ic=1,2,3 l=1e-6 w=10e-3" -cleanup {
    unset mosfet result
}

test testMosfetClass-9 {test Mosfet class} -setup {
    set mosfet [Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub -n5 net5 -n6 net6 -n7 net7 -ic {1 2 3} -custparams a 1 b 2 c 3]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets netsub net5 net6 net7 mosfetmod ic=1,2,3 l=1e-6 w=10e-3 a=1 b=2 c=3" -cleanup {
    unset mosfet result
}

test testMosfetClass-10 {test Mosfet class} -setup {
    set mosfet [Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub -n5 net5 -n6 net6 -n7 net7 -ic {1 2 3} -custparams a 1 b {beq -eq} c 3]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets netsub net5 net6 net7 mosfetmod ic=1,2,3 l=1e-6 w=10e-3 a=1 b={beq} c=3" -cleanup {
    unset mosfet result
}

test testMosfetClass-11 {test Mosfet class} -setup {
    catch {Mosfet new 1 netd netg nets -model mosfetmod -l 1e-6 -w 10e-3 -n4 netsub -n5 net5 -n6 net6 -n7 net7 -ic {1 2 3} -custparams a 1 b {beq -eq} c 3 k} errorStr
} -body {
    set result $errorStr
} -result "Custom parameters list must be even length" -cleanup {
    unset result
}

####  M class tests 

test testMClass-1 {test M class} -setup {
    set mosfet [M new 1 netd netg nets -model mosfetmod -l 1e-6 -w {w/nf -eq}]
} -body {
    set result [$mosfet genSPICEString]
} -result "m1 netd netg nets mosfetmod l=1e-6 w={w/nf}" -cleanup {
    unset mosfet result
}
    
####  SubcircuitInstance class tests 
    
test testSubcircuitInstanceClass-1 {test creation of SubcircuitInstance class instance with genSPICEString interface} -setup {
    set subInst [SubcircuitInstance new 1 {{plus net1} {minus net2}} rcnet {{r 1} {c cpar -eq}}]
} -body {
    set result [$subInst genSPICEString]
} -result {x1 net1 net2 rcnet PARAMS: r=1 c={cpar}} -cleanup {
    unset subInst result
}

####  X class tests 

test testXClass-2 {test X alias for SubcircuitInstance class} -setup {
    set subInst [X new 1 {{plus net1} {minus net2}} rcnet {{r 1} {c cpar -eq}}]
} -body {
    set result [$subInst genSPICEString]
} -result {x1 net1 net2 rcnet PARAMS: r=1 c={cpar}} -cleanup {
    unset subInst result
}

####  SubcircuitInstanceAuto class tests 
    
test testSubcircuitInstanceAutoClass-1 {test creation of SubcircuitInstanceAuto class instance with genSPICEString interface} -setup {
    oo::class create RCnet {
        superclass Subcircuit
        constructor {} {
            # define external pins of subcircuit
            set pins {plus minus}
            # define input parameters of subcircuit
            set params {{r 100} {c 1e-6}}
            # add elements to subcircuit definition
            my add [R new 1 net1 net2 -r {r -eq}]
            my add [C new 1 net2 net3 -c {c -eq}]
            # pass name, list of pins and list of parameters to Subcircuit constructor
            next rcnet $pins $params
        }
    }
    set subcircuit [RCnet new]
} -body {
    set subInst1 [SubcircuitInstanceAuto new $subcircuit 2 {net1 net2} -r 1 -c {cpar -eq}]
    set result [$subInst1 genSPICEString]   
} -result {x2 net1 net2 rcnet PARAMS: r=1 c={cpar}} -cleanup {
    rename RCnet ""
    unset subcircuit subInst1 result
}

test testSubcircuitInstanceAutoClass-2 {test creation of SubcircuitInstanceAuto class instance with wrong number of nodes} -setup {
    oo::class create RCnet {
        superclass Subcircuit
        constructor {} {
            # define external pins of subcircuit
            set pins {plus minus}
            # define input parameters of subcircuit
            set params {{r 100} {c 1e-6}}
            # add elements to subcircuit definition
            my add [R new 1 net1 net2 -r {r -eq}]
            my add [C new 1 net2 net3 -c {c -eq}]
            # pass name, list of pins and list of parameters to Subcircuit constructor
            next rcnet $pins $params
        }
    }
    set subcircuit [RCnet new]
} -body {
    catch {SubcircuitInstanceAuto new $subcircuit 2 {net1 net2 net3} -r 1 -c {cpar -eq}} errorStr
    return $errorStr  
} -result {Wrong number of nodes '3' in definition, should be '2'} -cleanup {
    rename RCnet ""
    unset subcircuit errorStr
}

test testSubcircuitInstanceAutoClass-3 {test creation of SubcircuitInstanceAuto class instance with wrong class of input object} -setup {
    oo::class create RCnet {
        superclass Subcircuit
        constructor {} {
            # define external pins of subcircuit
            set pins {plus minus}
            # define input parameters of subcircuit
            set params {{r 100} {c 1e-6}}
            # add elements to subcircuit definition
            my add [R new 1 net1 net2 -r {r -eq}]
            my add [C new 1 net2 net3 -c {c -eq}]
            # pass name, list of pins and list of parameters to Subcircuit constructor
            next rcnet $pins $params
        }
    }
    set subcircuit [RCnet new]
    set res [R new 1 netp netm -r 1e3 -tc1 1 -temp 25]
} -body {
    catch {SubcircuitInstanceAuto new $res 2 {net1 net2 net3} -r 1 -c {cpar -eq}} errorStr
    return $errorStr  
} -result {Wrong object class '::SpiceGenTcl::Xyce::BasicDevices::R' is passed as subcktObj, should be '::SpiceGenTcl::Subcircuit'} -cleanup {
    rename RCnet ""
    unset subcircuit res errorStr
}



cleanupTests
